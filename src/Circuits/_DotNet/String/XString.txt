import { List } from "../Array/List";

export function xs(str: string|XString|null): XString
{
    if(str instanceof XString) return str;
    return new XString(str as string);
}
export function s(str: string|XString): string
{
    if(str instanceof XString) return str.Value;
    return str;
}

export class XString
{
    constructor(public Value: string) { }

    public get Length(): number
    {
        return this.Value.length;
    }

    // public PadRight(totalWidth: number, paddingChar: string | XString): XString
    // {
    //     paddingChar = s(paddingChar);

    //     if (paddingChar.length !== 1)
    //         throw "Only one character expected in paddingChar";
    //     let countLeft = totalWidth - this.Length;

    //     for (let x = 0; x < countLeft; x++)
    //     {
    //         this.Value = this.Value + paddingChar;
    //     }
    //     return this;
    // }

    // public PadLeft(totalWidth: number, paddingChar: string | XString): XString
    // {
    //     paddingChar = s(paddingChar);

    //     if (paddingChar.length != 1)
    //         throw "Only one character expected in paddingChar";
    //     let countLeft = totalWidth - this.Length;

    //     for (let x = 0; x < countLeft; x++)
    //     {
    //         this.Value = this.Value + paddingChar;
    //     }
    //     return this;
    // };

    // public Substring(startIndex: number, length?: number): string
    // {
       
    //     if (startIndex >= this.Length)
    //         throw new Error("Index out of range");

    //     if(!length)
    //     {
    //         length = this.Length - startIndex;
    //     }
    //     else
    //     {
    //         if (startIndex + length > this.Length)
    //             throw "String.Substring() index out of range";
    //     }

    //     let lastIndex = startIndex + length;
    //     return this.Value.slice(startIndex, lastIndex);
    // };

    // public Remove(startIndex: number, length: number): XString
    // {
    //     if (length <= 0)
    //         throw new Error("Invalid argument length");

    //     if (startIndex + length - 1 > this.Length)
    //         throw new Error("Out of range.");

    //     let leftPart = this.Substring(0, startIndex);
    //     let rightPart = this.Substring(startIndex + length, this.Length - startIndex - length);
    //     return xs(leftPart + rightPart);
    // };

    // public Contains(substr: string | XString): boolean
    // {
    //     if(substr == null || substr == "")
    //         throw new Error("substr cannot be null or empty");

    //     substr = s(substr);

    //     return this.Value.includes(substr, 0);
    // };

    // public Insert(index: number, value: string | XString): XString
    // {
    //     if (index < 0 || index >= this.Value.length)
    //         throw new Error('Out of range');

    //     if(value != null) value = s(value);

    //     return xs(`${this.Substring(0, index)}${value}${this.Substring(index)}`);
    // }

    // public ToString(): string
    // {
    //     return this.Value;
    // }

    // public IsNullOrEmpty(): boolean
    // {
    //     if (this.Value == null)
    //         return true;

    //     if (this.Value === "")
    //         return true;

    //     return false;
    // }

    // public IsNullOrWhiteSpace(): boolean
    // {
    //     if (this.Value == null)
    //     return true;

    //     if (new RegExp(/^\s*$/g).test(this.Value))
    //         return true;
    //     else
    //         return false;
    // }

    // public static Join(separator:string|XString, parts:string[]|XString[]): XString
    // {
    //     if(parts.length == 0)
    //         return new XString('');

    //     separator = s(separator);

    //     if(parts[0] instanceof XString)
    //         parts = new List<XString>(parts as XString[])
    //                 .Select(x=>x.Value).Array;

    //     return xs(parts.join(separator)); 
    // }

    // public StartsWith(str: string)
    // {
    //     return this.Value.startsWith(str);
    // }

    // public EndsWith(str: string)
    // {
    //     return this.Value.endsWith(str);
    // }

    // public IndexOf(subStr:string|XString, startSearchFromIndex?:number): number
    // {
    //     if(!startSearchFromIndex)
    //         startSearchFromIndex = 0;

    //     if(subStr == null)
    //         throw new Error("subStr cannot be null");

    //     if(subStr instanceof XString) subStr = subStr.Value;

    //     if(startSearchFromIndex < 0 || startSearchFromIndex >= subStr.length)
    //         throw new Error("Index out of range");

    //     return this.Value.indexOf(subStr, startSearchFromIndex)
    // }

    // public LastIndexOf(subStr:string|XString): number
    // {
    //     if(subStr == null)
    //         throw new Error("subStr cannot be null");

    //     if(subStr instanceof XString) subStr = subStr.Value;
            
    //     return this.Value.lastIndexOf(subStr);
    // }

    // public ReplaceOnce(toReplace: string|XString, 
    //                    replacement: string|XString): XString
    // {
    //     if(toReplace instanceof XString) toReplace = toReplace.Value;
    //     if(replacement instanceof XString) replacement = replacement.Value;

    //     this.Value = this.Value.replace(toReplace, replacement);

    //     return this;
    // }

    // public ReplaceAll(toReplace: string|XString, 
    //                   replacement: string|XString): XString
    // {
    //     if(toReplace instanceof XString) toReplace = toReplace.Value;
    //     if(replacement instanceof XString) replacement = replacement.Value;

    //     if(toReplace == replacement) this;

    //     while(this.Value.indexOf(toReplace) >= 0)
    //     {
    //         this.Value = this.Value.replace(toReplace, replacement);
    //     }

    //     return this;
    // }

    // private toString(): string
    // {
    //     return this.Value;
    // }
}